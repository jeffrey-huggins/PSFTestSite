@using AtriumWebApp.Models
@using AtriumWebApp.Web.Base.Library
@model AtriumWebApp.Web.ClinicalOps.Models.ViewModel.EmployeeSidebarViewModel
@{
    string appCode = Model.AppCode;
    string LookbackDate;
    Context.Session.TryGetObject(appCode + "LookbackDate", out LookbackDate);
    string EVACCurrentFacility;
    Context.Session.TryGetObject(appCode + "CurrentFacility", out EVACCurrentFacility);
    string CensusDateInvalid;
    Context.Session.TryGetObject("CensusDateInvalid", out CensusDateInvalid);
    string CensusDateInFuture;
    Context.Session.TryGetObject("CensusDateInFuture", out CensusDateInFuture);
    IList<Community> EVACFacilityList;
    Context.Session.TryGetObject(appCode + "FacilityList", out EVACFacilityList);
    IList<Patient> EVACResidentList;
    Context.Session.TryGetObject(appCode + "ResidentList", out EVACResidentList);
    string EVACCurrentResidentIdString;
    Context.Session.TryGetObject(appCode + "CurrentResidentIdString", out EVACCurrentResidentIdString);
    string EVACCurrentEmployeeName;
    Context.Session.TryGetObject(appCode + "CurrentEmployeeName", out EVACCurrentEmployeeName);
    string EVACCurrentResidentFacility;
    Context.Session.TryGetObject("CensusDateInFuture", out EVACCurrentResidentFacility);
    string EVACCurrentResidentRoom;
    Context.Session.TryGetObject(appCode + "CurrentResidentRoom", out EVACCurrentResidentRoom);
    string EVACCurrentResidentBirthdate;
    Context.Session.TryGetObject(appCode + "CurrentResidentBirthdate", out EVACCurrentResidentBirthdate);
    string EVACCurrentResidentAdmitDate;
    Context.Session.TryGetObject(appCode + "CurrentResidentAdmitDate", out EVACCurrentResidentAdmitDate);
    string EVACCurrentResidentCensusDate;
    Context.Session.TryGetObject(appCode + "CurrentResidentCensusDate", out EVACCurrentResidentCensusDate);
    string EVACCurrentResidentAdmissionDiagnosis;
    Context.Session.TryGetObject(appCode + "CurrentResidentAdmissionDiagnosis", out EVACCurrentResidentAdmissionDiagnosis);
    string EVACCurrentResidentDiagnosis1;
    Context.Session.TryGetObject(appCode + "CurrentResidentDiagnosis1", out EVACCurrentResidentDiagnosis1);
    string EVACCurrentResidentDiagnosis2;
    Context.Session.TryGetObject(appCode + "CurrentResidentDiagnosis2", out EVACCurrentResidentDiagnosis2);
    string EVACCurrentResidentDiagnosis3;
    Context.Session.TryGetObject(appCode + "CurrentResidentDiagnosis3", out EVACCurrentResidentDiagnosis3);
    string ToDateRangeInvalid;
    Context.Session.TryGetObject("ToDateRangeInvalid", out ToDateRangeInvalid);
    string ToDateRangeInFuture;
    Context.Session.TryGetObject("ToDateRangeInFuture", out ToDateRangeInFuture);
    string FromDateRangeInvalid;
    Context.Session.TryGetObject("FromDateRangeInvalid", out FromDateRangeInvalid);
    string FromDateRangeInFuture;
    Context.Session.TryGetObject("FromDateRangeInFuture", out FromDateRangeInFuture);
    string FromAfterTo;
    Context.Session.TryGetObject("FromAfterTo", out FromAfterTo);
    string EVACoccurredRangeFrom;
    Context.Session.TryGetObject(appCode + "occurredRangeFrom", out EVACoccurredRangeFrom);
    string EVACoccurredRangeTo;
    Context.Session.TryGetObject(appCode + "occurredRangeTo", out EVACoccurredRangeTo);
    string CurrentFacility;
    Context.Session.TryGetObject(Model.AppCode + "CurrentFacility", out CurrentFacility);
    string TerminatedShown;
    Context.Session.TryGetObject(Model.AppCode + "TerminatedShown", out TerminatedShown);
    string CurrentEmployeeId;
    Context.Session.TryGetObject(Model.AppCode + "CurrentEmployeeId", out CurrentEmployeeId);
    string EmployeeName;
    Context.Session.TryGetObject(Model.AppCode + "CurrentEmployeeName", out EmployeeName);
    string CurrentEmployeeFacility;
    Context.Session.TryGetObject(Model.AppCode + "CurrentEmployeeFacility", out CurrentEmployeeFacility);
    string CurrentEmployeeDateHire;
    Context.Session.TryGetObject(Model.AppCode + "CurrentEmployeeDateHire", out CurrentEmployeeDateHire);
    string CurrentEmployeeDateTerm;
    Context.Session.TryGetObject(Model.AppCode + "CurrentEmployeeDateTerm", out CurrentEmployeeDateTerm);

}

<section class="left-column-picker" style="height: 800px">
    @Html.Label("Show Terminated Employees: ")
    @Html.CheckBox("Terminated")

    @using (Html.BeginForm("Lookback", Model.AppController, FormMethod.Post, new { id = "Lookback", style = "display:none;" }))
    {
        @Html.Label("Termination Date:")<br />
        @Html.TextBox("LookbackDate", LookbackDate, new { @class = "dateUS", size = "10" })
        @Html.Hidden("returnUrl", Context.UrlPath())
        @Html.Hidden("CurrentCommunity", CurrentFacility, new { @class = "CurrentCommunity" })

        <input type="submit" value="Update" onclick="" />
        <br /><br />
    }

    @Html.Hidden("CensusDateInvalid", CensusDateInvalid)
    @Html.Hidden("CensusDateInFuture", CensusDateInFuture)

    @using (Html.BeginForm(Model.SideBarDDLActionName, Model.AppController, FormMethod.Post, new { @id = "SideDDL" }))
    {
        @Html.Hidden("TerminatedShown", TerminatedShown ?? "false")

        @Html.Label("Community:")<br />
        @Html.DropDownList("Communities", new SelectList(EVACFacilityList, "CommunityId", "CommunityShortName"), new { @id = "Communities" });
        <br /><br />
        @Html.Label("Employee:")<br />
        @Html.DropDownList("ActiveEmployees", ViewData[Model.AppCode + "ActiveEmployeeList"] as SelectList, "Select an Employee", new { @id = "ActiveEmployees" })
        @Html.DropDownList("FullEmployees", ViewData[Model.AppCode + "FullEmployeeList"] as SelectList, "Select an Employee", new { @id = "FullEmployees", @style = "display: none;" })
        <br />
        @Html.Hidden("returnUrl", Context.UrlPath())
        @Html.Hidden("CurrentCommunity", CurrentFacility, new { @class = "CurrentCommunity" })
    }

    @Html.Hidden("CurrentEmployeeId", CurrentEmployeeId)

    @if (!Context.Session.Contains(Model.AppCode + "CurrentEmployeeName"))
    {
        <br />
        <div style="color: red; font-weight: bold;">Please choose an Employee</div>
    }
    <br />
    @Html.Label("", "Current Employee", new { @style = "font-weight: bold" })
    <p>
        <b>Name/Community:</b><br />
        @EmployeeName<br />
        @CurrentEmployeeFacility
    </p>
    <p>
        <b>Date of Hire:</b><br />
        @CurrentEmployeeDateHire
    </p>
    <p>
        <b>Date of Termination:</b><br />
        @CurrentEmployeeDateTerm
    </p>
</section>

<script type="text/javascript">
    $(document).ready(function () {
        $("#LookbackDate").datepicker({
            beforeShow: function (textbox, instance) {
                instance.dpDiv.css({
                    marginTop: "10px",
                    marginLeft: "0px"
                });
            }
        });

        $(function () {
            if ($("#CensusDateInvalid").val() == "1") {
                alert("Error: Please enter a valid Termination Date (mm/dd/yyyy)");
            }
            if ($("#CensusDateInFuture").val() == "1") {
                alert("Error: You can not have a Termination date that is in the future");
            }
        });

        var currentCommunity = $("#CurrentCommunity").val();
        var currentEmployee = $("#CurrentEmployeeId").val();

        $("#Communities").val(currentCommunity);
        $("#ActiveEmployees").val(currentEmployee);
        $("#FullEmployees").val(currentEmployee);

        $("#ActiveEmployees, #FullEmployees").change(function () {
            if ($(this).val() != "") {
                $("#SideDDL").submit();
            }
        });

        $("#Terminated").click(function () {
            toggleEmployeeLists();
        });

        if ($("#TerminatedShown").val() == "true") {
            $("#Terminated").prop("checked", true);
            toggleEmployeeLists();
        }

        $("#Communities").change(function () {
            ShowProgress();
            $.post("@Model.ChangeCommunityPath", {
                communityId: $("#Communities option:selected").val()
            }).done(function () {
                window.location.reload();
            });
        });
    });

    function toggleEmployeeLists() {
        if ($("#Terminated").is(":checked")) {
            $("#TerminatedShown").val(true);
            $("#ActiveEmployees").hide();
            $("#FullEmployees").show();
            $("#Lookback").show();
        } else {
            $("#TerminatedShown").val(false);
            $("#ActiveEmployees").show();
            $("#FullEmployees").hide();
            $("#Lookback").hide();
        }
    }
</script>