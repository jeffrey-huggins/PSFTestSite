@model AtriumWebApp.Web.PayrollTransfer.Models.ViewModel.ContractorPayrollEntryViewModel

@{
    ViewBag.Title = "Contractor Payroll Entry";
}

<h2>Contractor Payroll Entry</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Contractor Payroll Transfer</legend>
        @Html.EditorForModel()

        <p></p>
        <div class="third-spacing a-right">
            <button type="button" id="AddTransferItem" class="action-button"> Save + Add Entry</button>
        </div>
        <div class="third-spacing a-center">
            <button type="button" id="savePayrollTransfer" class="action-button">Save + Close</button>
        </div>
        <div class="third-spacing a-left">
            <button type="button" id="cancel-button" class="action-button"> Cancel </button>
            @Html.ActionLink("Back to List", "Index", null,null, new { @id = "returnUrl", style = "display:none" })
        </div>
    </fieldset>
}

<div>

</div>


<script>


    $(document).ready(function () {

        $("fieldset").on("change", ".contractor-payroll-item .source-community", function (data) {
            ShowProgress();
            var payrollTransferItem = $(data.target).parents(".contractor-payroll-item");
            var selectedValue = $(data.target).find("option:selected").val();

            //Sync Destination Community (in case just want to change the General ledger... saves a click)
            payrollTransferItem.find(".destination-community").val(selectedValue);

            $.ajax({
                url: "GetContractorList",
                dataType: "json",
                cache: false,
                type: "POST",
                data: { communityId: selectedValue }, //communityId: $("#SourceCommunity option:selected").val() },
                success: function (result) {
                    var optionHTML = "<option value=''>Select a Contractor</option>";

                    //Clear list
                    payrollTransferItem.find(".employee-list")[0].innerHTML = ""
                    payrollTransferItem.find(".employee-list")[0].options[0] = new Option("Select a Contractor", "");
                    for (x = 0; x < result.length; x++) {
                        payrollTransferItem.find(".employee-list")[0].options[x + 1] = new Option(result[x].Text, result[x].Value);
                        $(payrollTransferItem.find(".employee-list")[0].options[x + 1]).data("gl-id", result[x].JobClassID);
                    }


                    payrollTransferItem.find(".source-ledger").val("");
                    payrollTransferItem.find(".destination-ledger").val("");
                    HideProgress();
                },
                error: function (data, error, errortext) { HideProgress(); }
            }); //end of ajax call

        });

        $("fieldset").on("blur", ".contractor-payroll-item .transfer-date", function (data) {
            var transferDate = $(data.target);
            if (transferDate.val().length == 6) {
                var month = transferDate.val().substr(0, 2);
                var day = transferDate.val().substr(2, 2);
                var year = "20" + transferDate.val().substr(4, 2);

                var parsedDate = month + "/" + day + "/" + year; //new Date(month + "/" + day + "/" + year);

                transferDate.val(parsedDate);

            }
        });

        function isContractorItemValid(payrollItem) {
            if (parseInt(payrollItem.find("#ActiveEmployees option:selected").val()) == 0 || payrollItem.find("#ActiveEmployees option:selected").val().trim().length == 0
                    || parseInt(payrollItem.find("#SourceCommunity option:selected").val()) == 0 || payrollItem.find("#SourceCommunity option:selected").val().trim().length == 0
                    || parseInt(payrollItem.find("#SourceGLAccount option:selected").val()) == 0 || payrollItem.find("#SourceGLAccount option:selected").val().trim().length == 0
                || payrollItem.find(".transfer-date").val().trim().length == 0 || ValidateDate(payrollItem.find(".transfer-date").val()) == false) {
                return false;
            } else {
                return true;
            }
        }


        function saveContractorListAndContinue() {
            var payrollTransferItems = $("fieldset").children(".contractor-payroll-item");
            ShowProgress();

            //populate object
            var items = [];
            for (x = 0; x < payrollTransferItems.length; x++) {
                var pti = $(payrollTransferItems[x]);
                var item = {
                    contractorPayrollTransferId: parseInt(pti.find(".item-id").val())
                             , pTContractorId: parseInt(pti.find("#ActiveEmployees option:selected").val())
                             , communityId: parseInt(pti.find("#SourceCommunity option:selected").val())
                             , generalLedgerId: parseInt(pti.find("#SourceGLAccount option:selected").val())
                             , transferDate: pti.find(".transfer-date").val()
                             , hourCnt: parseFloat(pti.find("#HourCnt").val())
                             , payAmt: parseFloat(pti.find("#PayAmt").val())
                             , pBJOnlyFlg: pti.find("#PBJOnlyFlg").prop('checked')
                };
                items.push(item);

                if (isContractorItemValid(pti) == false) {
                    pti.addClass("invalid-item");

                } else {
                    pti.removeClass("invalid-item");
                }
            }

            //submit
            $.ajax({
                url: "CreateContractorItems",
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: "POST",
                data: JSON.stringify(items),
                success: function (result) {

                    for (x = 0; x < payrollTransferItems.length; x++) {
                        var ptItem = $(payrollTransferItems[x]);
                        ptItem.find(".item-id").val(result[x].ContractorPayrollTransferId);
                    }

                    HideProgress();
                },
                error: function (data, error, errortext) {
                    HideProgress();
                }
            });
        }

        $("#savePayrollTransfer").click(function (e) {
            var payrollTransferItems = $("fieldset").children(".contractor-payroll-item");
            ShowProgress();

            //verify values
            var isAllValid = true;

            //populate object
            var items = [];
            for (x = 0; x < payrollTransferItems.length; x++) {
                var pti = $(payrollTransferItems[x]);
                var item = {
                    contractorPayrollTransferId: parseInt(pti.find(".item-id").val())
                             , pTContractorId: parseInt(pti.find("#ActiveEmployees option:selected").val())
                             , communityId: parseInt(pti.find("#SourceCommunity option:selected").val())
                             , generalLedgerId: parseInt(pti.find("#SourceGLAccount option:selected").val())
                             , transferDate: pti.find(".transfer-date").val()
                             , hourCnt: parseFloat(pti.find("#HourCnt").val())
                             , payAmt: parseFloat(pti.find("#PayAmt").val())
                             , pBJOnlyFlg: pti.find("#PBJOnlyFlg").prop('checked')
                };
                items.push(item);

                if (isContractorItemValid(pti) == false) {
                    pti.addClass("invalid-item");
                    isAllValid = false;
                    
                } else {
                    pti.removeClass("invalid-item");
                }
            }

            if (isAllValid == false) {
                //HideProgress();
                saveContractorListAndContinue(); //probably should split the validation and the save logic. There is duplication here.
                return;
            }

            //submit
            $.ajax({
                url: "CreateContractorItems",
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: "POST",
                data: JSON.stringify(items),
                success: function (result) {
                    alert("Successfully saved.");
                    window.location.assign($("#returnUrl").attr("href"));
                },
                error: function (data, error, errortext) {
                    alert("Save failed. Please verify your entries and try again");
                    HideProgress();
                }
            });
        });

        $("#cancel-button").click(function (e) {
            e.preventDefault();
            var editTabLink = $("#returnUrl").attr("href");
            if (editTabLink.charAt(editTabLink.length - 1) != "/") {
                editTabLink += "/";
            }

            window.location.assign(editTabLink);
        });

        $("#AddTransferItem").click(function (e) {
            var payrollTransferItems = $("fieldset").children(".contractor-payroll-item");

            saveContractorListAndContinue();

            var lastItem = $("fieldset").children(".contractor-payroll-item").last();
            var newItem = $(lastItem[0].outerHTML);
            newItem.prop("class", "contractor-payroll-item");

            //re-add Active Employee gl-id data
            for (x = 1; x < newItem.find("#ActiveEmployees")[0].options.length; x++) {
                var gl_id = $(lastItem.find("#ActiveEmployees")[0].options[x]).data("gl-id");
                $(newItem.find("#ActiveEmployees")[0].options[x]).attr("data-gl-id", gl_id);
            }

            newItem.find(".transfer-date").prop("class", "isDate transfer-date");

            //reset dropdown boxes
            newItem.find("#SourceCommunity option:selected").attr("selected", false);
            newItem.find("#ActiveEmployees option:selected").attr("selected", false);
            newItem.find("#SourceGLAccount option:selected").attr("selected", false);


            //assign values
            newItem.find("#SourceCommunity").val(lastItem.find("#SourceCommunity option:selected").val());
            newItem.find("#ActiveEmployees").val(lastItem.find("#ActiveEmployees option:selected").val());
            newItem.find("#SourceGLAccount").val(lastItem.find("#SourceGLAccount option:selected").val());

            newItem.find("#SourceCommunity option:selected").attr("selected", true);
            newItem.find("#ActiveEmployees option:selected").attr("selected", true);
            newItem.find("#SourceGLAccount option:selected").attr("selected", true);
            newItem.find(".transfer-date").attr("value", lastItem.find(".transfer-date").val());
            newItem.find("#HourCnt").attr("value", lastItem.find("#HourCnt").val());
            newItem.find("#PayAmt").attr("value", lastItem.find("#PayAmt").val());
            newItem.find("#PBJOnlyFlg").attr('checked', lastItem.find("#PBJOnlyFlg").prop('checked'));
            newItem.find(".item-id").attr("value", 0);

            newItem.find(".transfer-date").prop("id", "TransferDate_" + payrollTransferItems.length);

            payrollTransferItems.last().after(newItem[0].outerHTML);
            $(".isDate").datepicker();
        });

        $(function () {
            $(".isDate").datepicker({
                beforeShow: function (textbox, instance) {
                    instance.dpDiv.css({
                        marginTop: (-textbox.offsetHeight) + "px",
                        marginLeft: textbox.offsetWidth + "px"
                    });
                }
            });
        });

    }); //end of document.ready()
</script>
