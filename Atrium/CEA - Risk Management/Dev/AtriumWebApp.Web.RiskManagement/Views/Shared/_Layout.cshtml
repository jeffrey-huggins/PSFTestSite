@using AtriumWebApp.Web.Base.Library
@using Microsoft.AspNetCore.Http
<!DOCTYPE html>

<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <environment names="Testing">
        <style>
            #banner{
                background-color:crimson !important;
            }
        </style>
    </environment>
    <environment names="Training">
        <style>
            #banner {
                background-color: green !important;
            }
        </style>
    </environment>

    <environment names="Development">
        <link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />
        <link href="~/css/1378.css" rel="stylesheet" />
        <link href="~/lib/DataTables/media/css/jquery.dataTables.css" rel="stylesheet" />
        <link rel="stylesheet" href="~/lib/jquery-ui/themes/base/jquery-ui.css" asp-append-version="true" />
        <link href="~/css/960.min.css" rel="stylesheet" />
        <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="~/css/CustomStyle_v1.css" asp-append-version="true" />
    </environment>
    <environment names="Testing,Production,Training">
        <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
        <link href="~/css/1378.css" rel="stylesheet" />
        <link href="~/lib/DataTables/media/css/jquery.dataTables.css" rel="stylesheet" />
        <link rel="stylesheet" href="~/lib/jquery-ui/themes/base/jquery-ui.min.css" />
        <link href="~/css/960.min.css" rel="stylesheet" />
        <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="~/css/CustomStyle_v1.css" asp-append-version="true" />
    </environment>

    <environment names="Development">
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/DataTables/media/js/jquery.dataTables.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
        <script src="~/lib/jquery-ui/jquery-ui.js"></script>
        <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
        <script src="~/lib/jquery-validation/dist/additional-methods.js"></script>
        <script src="~/lib/moment/min/moment.min.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>
        <script src="~/js/Countdown.js" asp-append-version="true"></script>
    </environment>
    <environment names="Testing,Production,Training">
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/DataTables/media/js/jquery.dataTables.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
        <script src="~/lib/jquery-ui/jquery-ui.js"></script>
        <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
        <script src="~/lib/jquery-validation/dist/additional-methods.min.js"></script>
        <script src="~/lib/moment/min/moment.min.js"></script>
        <script src="~/js/site.min.js" asp-append-version="true"></script>
        <script src="~/js/Countdown.js" asp-append-version="true"></script>

    </environment>

    @RenderSection("Scripts", required: false)
    <script>
        $(document).ready(function () {
 
                var txts = document.getElementsByTagName('TEXTAREA');

                for (var i = 0, l = txts.length; i < l; i++) {
                    if (/^[0-9]+$/.test(txts[i].getAttribute("maxlength"))) {
                        var func = function () {
                            var len = parseInt(this.getAttribute("maxlength"), 10);

                            if (this.value.length > len) {
                                alert('Maximum length exceeded: ' + len);
                                this.value = this.value.substr(0, len);
                                return false;
                            }
                        }

                        txts[i].onkeyup = func;
                        //txts[i].onblur = func;
                    }
                }

                ActivateCountDown("CountDownPanel", @Context.Session.GetTimeout());
            

            $('form').on("submit", function () {
                ShowProgress();
            });

            $.fn.dataTableExt.oApi.fnStandingRedraw = function (oSettings) {
                if (oSettings.oFeatures.bServerSide === false) {
                    var before = oSettings._iDisplayStart;

                    oSettings.oApi._fnReDraw(oSettings);

                    // iDisplayStart has been reset to zero - so lets change it back
                    oSettings._iDisplayStart = before;
                    oSettings.oApi._fnCalculateEnd(oSettings);
                }

                // draw the 'current' page
                oSettings.oApi._fnDraw(oSettings);
            };

            $(function () {
                $.validator.addMethod(
                    "dateUS",
                    function (value, element) {
                        var check = false;
                        var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
                        if (re.test(value)) {
                            var adata = value.split('/');
                            var mm = parseInt(adata[0], 10); // was gg (giorno / day)
                            var dd = parseInt(adata[1], 10); // was mm (mese / month)
                            var yyyy = parseInt(adata[2], 10); // was aaaa (anno / year)
                            var xdata = new Date(yyyy, mm - 1, dd);
                            if ((xdata.getFullYear() == yyyy) && (xdata.getMonth() == mm - 1) && (xdata.getDate() == dd))
                                check = true;
                            else
                                check = false;
                        } else
                            check = false;
                        return this.optional(element) || check;
                    },
                    "<br />Please enter a valid date (mm/dd/yyyy)"
                );
                // Validate for 2 decimal for money
                $.validator.addMethod("money", function (value, element) {
                    return this.optional(element) || /^(-)?(\d+)(\.\d{2})?$/.test(value);
                }, "<br />Must be in US currency format");
                $.validator.addMethod("dateFuture",
                    function (value, element) {
                        if (value == "")
                            return true;
                        var today = new Date();
                        var valDate = new Date(value);
                        return valDate < today;
                    },
                    "<br />Date cannot be in the future"
                );
                $.validator.addMethod("requiredsmallHr", function (value, element) {
                    var hour = parseInt(value, 10);
                    if ((hour >= 1) && (hour <= 12)) {
                        return true;
                    }
                }, "*");
                $.validator.addMethod("requiredsmallMin", function (value, element) {
                    var hour = parseInt(value, 10);
                    if ((hour >= 0) && (hour <= 59)) {
                        return true;
                    }
                }, "*");
                $.validator.addMethod("beforeIncident", function (value, element) {
                    if (value == "")
                        return true;
                    var incidentText = $("#DateIncident").val();
                    var dateIncident = new Date(incidentText);
                    var dateInQuestion = new Date(value);

                    return dateIncident <= dateInQuestion;
                }, "<br />Date cannot occur before the Incident Date.");
                $.validator.addMethod("beforeOccurred", function (value, element) {
                    if (value == "")
                        return true;
                    var occurredText = $("#DateOccurred").val();
                    var dateOccurred = new Date(occurredText);
                    var dateInQuestion = new Date(value);

                    return dateOccurred <= dateInQuestion;
                }, "<br />Resolved Date cannot occur before the Date Occurred.");
                $.validator.addMethod("beforeOnset", function (value, element) {
                    if (value == "")
                        return true;
                    var onsetText = $("#DateOnset").val();
                    var dateOnset = new Date(onsetText);
                    var dateInQuestion = new Date(value);

                    return dateOnset <= dateInQuestion;
                }, "<br />Date cannot occur before the Onset Date.");
            });
            $(function () {
                if ($("#ToDateRangeInvalid").val() == "1") {
                    alert('Error: Please enter a valid date in the Incident Date Range "To" Field (mm/dd/yyyy)');
                }
                if ($("#FromDateRangeInvalid").val() == "1") {
                    alert('Error: Please enter a valid date in the Incident Date Range "From" Field (mm/dd/yyyy)');
                }
                if ($("#ToDateRangeInFuture").val() == "1") {
                    alert('Error: Please enter a valid date that is not in the future in the Incident Date Range "To" Field');
                }
                if ($("#FromDateRangeInFuture").val() == "1") {
                    alert('Error: Please enter a valid date that is not in the future in the Incident Date Range "From" Field');
                }
                if ($("#FromAfterTo").val() == "1") {
                    alert('Error: You can not have the "From" Date after the "To" Date in the Incident Date Range Fields');
                }
            });
            // Extend the default Number object with a formatMoney() method:
            // usage: someVar.formatMoney(decimalPlaces, symbol, thousandsSeparator, decimalSeparator)
            // defaults: (2, "$", ",", ".")
            Number.prototype.formatMoney = function (places, symbol, thousand, decimal) {
                places = !isNaN(places = Math.abs(places)) ? places : 2;
                symbol = symbol !== undefined ? symbol : "$";
                thousand = thousand || ",";
                decimal = decimal || ".";
                var number = this,
                    negative = number < 0 ? "-" : "",
                    i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + "",
                    j = (j = i.length) > 3 ? j % 3 : 0;
                return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : "");
            };
        });

        function HTMLDecode(str) {
            return $("<div/>").html(str).text();
        };

        function ShowProgress() {
            if ($(".loading").hasClass('ui-dialog-content')) {
                return;
            }
            setTimeout(function () {
                var loading = $(".loading");
                loading.dialog({
                    closeOnEscape: false,
                    modal: true,
                    draggable: false,
                    resizable: false,
                    dialogClass: "no-close",
                    close: function () {
                        $(this).dialog("destroy");

                    }
                });
            }, 200);
        }
        function HideProgress() {
            setTimeout(function () {
                var loading = $(".loading");
                if (loading.hasClass('ui-dialog-content')) {
                    loading.dialog("close");
                }
                
            }, 200);
        }

        function ValidateCurrency(value) {
            return /^(-)?(\d+)(\.\d{2})?$/.test(value);
        }

        function ValidateDate(value) {
            var check = false;
            var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
            if (re.test(value)) {
                var adata = value.split('/');
                var mm = parseInt(adata[0], 10); // was gg (giorno / day)
                var dd = parseInt(adata[1], 10); // was mm (mese / month)
                var yyyy = parseInt(adata[2], 10); // was aaaa (anno / year)
                var xdata = new Date(yyyy, mm - 1, dd);
                if ((xdata.getFullYear() == yyyy) && (xdata.getMonth() == mm - 1) && (xdata.getDate() == dd))
                    check = true;
                else
                    check = false;
            } else
                check = false;
            return check;
        }

        function IsDateFuture(dateString) {
            var date = new Date(dateString);
            if (date > new Date())
                return true;
            else
                return false;
        }

        function ValidateHr(value) {
            var hour = parseInt(value, 10);
            if ((hour >= 1) && (hour <= 12)) {
                return true;
            }
            return false;
        }

        function ValidateMin(value) {
            var hour = parseInt(value, 10);
            if ((hour >= 0) && (hour <= 59)) {
                return true;
            }
            return false;
        }
    </script>
</head>
<body>
    @Html.Partial("~/Views/Shared/TopNav.cshtml")
    <noscript>
        <div>
            <h2>This site requires JavaScript</h2>
        </div>
    </noscript>
    <section class="content-wrapper main-content">
        @RenderBody()
    </section>
    <div class="loading" align="center">
        Information is being sent.<br />
        <br />
        <img src="~/Images/loader.gif" />
    </div>
    <div class="timeout" align="center">
        Your Session has ended.<br />
        <br />
        Please click OK to be redirected to the Home Page<br />
        <br />
        <button onclick="window.location = '@ViewBag.BaseUrl'">OK</button>
    </div>

    @Html.Hidden("SessionTimeout", Context.Session.GetTimeout())
    <environment names="Development">
        <div id="debugInfo" style="display:none;">
            @{
                int total = 0;
            }
            <table>
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Length</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var key in Context.Session.Keys)
                    {
                        byte[] value;
                        Context.Session.TryGetValue(key, out value);
                        <tr>
                            <td>@key</td>
                            <td>@value.Length</td>
                            <td>
                                @(total += value.Length)
                                @if (value.Length < 1000)
                                {
                                    <div>@Context.Session.GetString(key)</div>
                                }
                                else
                                {
                                    <div style="display:none;">@Context.Session.GetString(key)</div>

                                }
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
            Total = @((total / 1024.0) / 1024.0) MB
        </div>
    </environment>
</body>
</html>


