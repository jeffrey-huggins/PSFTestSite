@model AtriumWebApp.Web.Survey.Models.ViewModel.MockSurveyPlanOfCorrectionIndexViewModel
@{
    ViewBag.Title = "Customer Service and Compliance Survey-Plan of Correction for Communities";
}
<style>
    .edit-link {
        white-space: nowrap;
    }
</style>
<section class="table-cell">
    @using (Html.BeginForm("UpdateCurrentCommunity", null, FormMethod.Post, new { id = "CommunitySelectionForm" }))
    {
        @Html.LabelFor(m => m.CurrentCommunity)<text>:</text><br />
        @Html.DropDownListFor(m => m.CurrentCommunity, new SelectList(Model.Communities, "CommunityId", "CommunityShortName", Model.CurrentCommunity))
        @Html.Hidden("returnUrl", Context.UrlPath());
    }
</section>
<section class="table-cell">
    <div class="container_16 margin_separator">
        <div class="grid_16">
            <div id="formContent">
                @if (Model.PlanOfCorrection != null)
                {
                    @Html.Partial("_Dashboard", Model.PlanOfCorrection)
                }
            </div>
        </div>
    </div>
    <div class="container_16 bottom_pad">
        <div class="grid_16">
            @using (Html.BeginForm("UpdateRange", null, FormMethod.Post, new { @class = "float-right" }))
            {
                @Html.Hidden("returnUrl", Context.UrlPath());
                <span>
                    Date Range - 
                    @Html.LabelFor(m => m.OccurredRangeFrom):
                    @Html.EditorFor(m => m.OccurredRangeFrom, new { @class = "isDate", size = "10" })
                    @Html.LabelFor(m => m.OccurredRangeTo):
                    @Html.EditorFor(m => m.OccurredRangeTo, new { @class = "isDate", size = "10" })
                </span>
                <input id="submit" name="submit" type="submit" value="Update" />
            }
            @{
                string ToDateRangeInvalid;
                Context.Session.TryGetObject("ToDateRangeInvalid", out ToDateRangeInvalid);
                string ToDateRangeInFuture;
                Context.Session.TryGetObject("ToDateRangeInFuture", out ToDateRangeInFuture);
                string FromDateRangeInvalid;
                Context.Session.TryGetObject("FromDateRangeInvalid", out FromDateRangeInvalid);
                string FromDateRangeInFuture;
                Context.Session.TryGetObject("FromDateRangeInFuture", out FromDateRangeInFuture);
                string FromAfterTo;
                Context.Session.TryGetObject("FromAfterTo", out FromAfterTo);
            }

            @Html.Hidden("ToDateRangeInvalid", ToDateRangeInvalid)
            @Html.Hidden("ToDateRangeInFuture", ToDateRangeInFuture)
            @Html.Hidden("FromDateRangeInvalid", FromDateRangeInvalid)
            @Html.Hidden("FromDateRangeInFuture", FromDateRangeInFuture)
            @Html.Hidden("FromAfterTo", FromAfterTo)
        </div>
    </div>
    <div class="container_16">
        <div class="grid_16">
            <table id="MockSurveys">
                <thead>
                    <tr>
                        <th>Open Date</th>
                        <th>Closed Date</th>
                        <th>Follow-up Date</th>
                        <th>Plan of Correction Complete Date</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                    <tr id="@item.Id">
                        <td>@item.MockSurveyDate.ToShortDateString()</td>
                        <td>@(item.ClosedDate.HasValue ? item.ClosedDate.Value.ToShortDateString() : string.Empty)</td>
                        <td>@(item.FollowUpDate.HasValue ? item.FollowUpDate.Value.ToShortDateString() : string.Empty)</td>
                        <td>@(item.PlanOfCorrectionCompleteDate.HasValue ? item.PlanOfCorrectionCompleteDate.Value.ToShortDateString() : string.Empty)</td>
                        <td>
                            @if (!item.IsPlanOfCorrectionComplete || Model.IsAdministrator)
                            {
                            @Html.ActionLink("Plan Corrections", "PlanCorrections", new { id = item.Id }, new { @class = "edit-link" })
                            }
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>
<environment names="Development">
    <script src="~/js/MockSurveyPlanOfCorrection.js" asp-append-version="true"></script>
</environment>
<environment names="Testing,Production,Training">
    <script src="~/js/MockSurveyPlanOfCorrection.min.js" asp-append-version="true"></script>
</environment>
<script type="text/javascript">
    $(document).ready(function () {
        PreparePage('@Url.Action("Index", "MockSurveyPlanOfCorrection")');
    });
</script>
